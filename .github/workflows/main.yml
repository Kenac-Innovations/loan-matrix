name: goodfellow-ussd CI/CD

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]

# Grant necessary permissions to the built-in GITHUB_TOKEN
permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/kenac-innovations/goodfellowussd

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      GITOPS_APP_ID: ${{ secrets.GITOPS_APP_ID }}
    steps:
      - name: Checkout application repository
        uses: actions/checkout@v4
        with:
          repository: Kenac-Innovations/GoodFellowUssd
          path: app-source

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run tests
        run: |
          cd app-source
          ./mvnw test || echo "No tests configured"

      - name: Build application
        run: |
          cd app-source
          ./mvnw clean package -DskipTests

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: app-source
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # GitOps automation steps
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=qa" >> $GITHUB_OUTPUT
          fi

      - name: Extract image tag
        id: image-tag
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          SHA_TAG=$(echo "$TAGS" | grep -E "${{ github.ref_name }}-[a-f0-9]{7}" | head -1 | cut -d':' -f2)
          echo "tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "Found image tag: $SHA_TAG"

      # GitHub App Token Generation
      - name: Generate GitHub App Token
        id: github-app-token
        if: env.GITOPS_APP_ID != ''
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.GITOPS_APP_ID }}
          private_key: ${{ secrets.GITOPS_APP_PRIVATE_KEY }}
          repository: Kenac-Innovations/kenac-gitops

      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: Kenac-Innovations/kenac-gitops
          token: ${{ steps.github-app-token.outputs.token || secrets.GITOPS_TOKEN || github.token }}
          path: gitops-repo

      - name: Update image tag in GitOps repo
        run: |
          cd gitops-repo
          
          ENV="${{ steps.env.outputs.environment }}"
          VALUES_FILE="projects/goodfellow-ussd/environments/${ENV}/values.yaml"
          NEW_TAG="${{ steps.image-tag.outputs.tag }}"
          
          echo "Environment: $ENV"
          echo "Values file path: $VALUES_FILE"
          echo "New tag: $NEW_TAG"
          echo "Current directory: $(pwd)"
          echo "Files in projects directory:"
          ls -la projects/ || echo "No projects directory found"
          echo "Files in goodfellow-ussd directory:"
          ls -la projects/goodfellow-ussd/ || echo "No goodfellow-ussd directory found"
          
          echo "Updating $VALUES_FILE with tag: $NEW_TAG"
          
          if ! command -v yq &> /dev/null; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          
          yq eval ".image.tag = \"$NEW_TAG\"" -i "$VALUES_FILE"
          
          echo "Updated values file:"
          cat "$VALUES_FILE"

      - name: Commit and push changes
        run: |
          cd gitops-repo
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          ENV="${{ steps.env.outputs.environment }}"
          NEW_TAG="${{ steps.image-tag.outputs.tag }}"
          
          git add .
          git commit -m "Update goodfellow-ussd image tag to $NEW_TAG for $ENV environment
          
          - Updated by GitHub Actions
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref_name }}
          - Workflow: ${{ github.workflow }}"
          
          git push origin master

      - name: Deployment summary
        run: |
          echo "ðŸš€ Deployment Summary:"
          echo "- Environment: ${{ steps.env.outputs.environment }}"
          echo "- Image Tag: ${{ steps.image-tag.outputs.tag }}"
          echo "- GitOps repo updated successfully"
          echo "- ArgoCD will automatically sync the changes"
