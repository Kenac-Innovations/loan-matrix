generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  status            String    @default("DRAFT") // DRAFT, SUBMITTED, CLOSED
  closedReason      String?
  
  // Client Information
  officeId          Int?
  officeName        String?
  legalFormId       Int?
  legalFormName     String?
  externalId        String?   // National ID
  firstname         String?
  middlename        String?
  lastname          String?
  dateOfBirth       DateTime?
  gender            String?
  genderId          Int?
  isStaff           Boolean   @default(false)
  mobileNo          String?
  countryCode       String?   @default("+1")
  emailAddress      String?
  clientTypeId      Int?
  clientTypeName    String?
  clientClassificationId Int?
  clientClassificationName String?
  submittedOnDate   DateTime?
  active            Boolean   @default(true)
  activationDate    DateTime?
  openSavingsAccount Boolean  @default(false)
  savingsProductId  Int?
  savingsProductName String?
  
  // Response data
  clientId          Int?
  resourceId        Int?
  
  // Family Members / Next of Kin
  familyMembers     FamilyMember[]
  
  // User relationship
  userId            String
  // Tracking
  currentStep       Int      @default(1)
  lastModified      DateTime @default(now())
  
  @@index([userId])
  @@index([status])
}

model FamilyMember {
  id                String   @id @default(cuid())
  firstname         String
  lastname          String
  middlename        String?
  relationship      String
  dateOfBirth       DateTime?
  mobileNo          String?
  emailAddress      String?
  isDependent       Boolean  @default(false)
  
  leadId            String
  lead              Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@index([leadId])
}

// Lookup tables
model Office {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LegalForm {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Gender {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ClientType {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ClientClassification {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SavingsProduct {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  interestRate      Float    @default(0)
  minBalance        Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// RAG and Fineract Integration Tables
model FineractDocument {
  id                String   @id @default(cuid())
  title             String
  content           String
  documentType      String   // "client", "loan", "product", "report", "policy"
  fineractId        String?  // Reference to Fineract entity ID
  metadata          Json?    // Additional metadata
  embedding         String?  // Vector embedding as string (will be converted to vector)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([documentType])
  @@index([fineractId])
  @@unique([fineractId, documentType])
}

model FineractDataCache {
  id                String   @id @default(cuid())
  endpoint          String   // Fineract API endpoint
  entityId          String?  // Specific entity ID if applicable
  data              Json     // Cached Fineract data
  embedding         String?  // Vector embedding as string
  lastUpdated       DateTime @default(now())
  expiresAt         DateTime // TTL for cache
  
  @@index([endpoint])
  @@index([entityId])
  @@index([expiresAt])
}

model ChatSession {
  id                String   @id @default(cuid())
  userId            String
  sessionData       Json?    // Conversation context
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  messages          ChatMessage[]
  
  @@index([userId])
}

model ChatMessage {
  id                String      @id @default(cuid())
  sessionId         String
  role              String      // "user" or "assistant"
  content           String
  fineractData      Json?       // Referenced Fineract data
  sources           Json?       // Source documents/data used
  createdAt         DateTime    @default(now())
  
  session           ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
}

model QueryLog {
  id                String   @id @default(cuid())
  userId            String
  userQuery         String
  fineractDataUsed  Json?    // What Fineract data was accessed
  response          String
  responseTime      Int      // Response time in milliseconds
  timestamp         DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
}
